<?php
	/**
	 * QJqDateTimePickerGen File
	 * 
	 * The abstract QJqDateTimePickerGen class defined here is
	 * code-generated and contains options, events and methods scraped from the
	 * JQuery UI documentation Web site. It is not generated by the typical
	 * codegen process, but rather is generated periodically by the core QCubed
	 * team and checked in. However, the code to generate this file is
	 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
	 * and you can regenerate the files if you need to.
	 *
	 * The comments in this file are taken from the JQuery UI site, so they do
	 * not always make sense with regard to QCubed. They are simply provided
	 * as reference. Note that this is very low-level code, and does not always
	 * update QCubed state variables. See the QJqDateTimePickerBase 
	 * file, which contains code to interface between this generated file and QCubed.
	 *
	 * Because subsequent re-code generations will overwrite any changes to this
	 * file, you should leave this file unaltered to prevent yourself from losing
	 * any information or code changes.  All customizations should be done by
	 * overriding existing or implementing new methods, properties and variables
	 * in the QJqDateTimePicker class file.
	 *
	 */

	/* Custom event classes for this control */
	
	

	/* Custom "property" event classes for this control */
	/**
	 * null
	 */
	class QJqDateTimePicker_beforeShowEvent extends QJqUiPropertyEvent {
		const EventName = 'QJqDateTimePicker_beforeShow';
		protected $strJqProperty = 'beforeShow';
	}

	/**
	 * null
	 */
	class QJqDateTimePicker_ChangeMonthYearEvent extends QJqUiPropertyEvent {
		const EventName = 'QJqDateTimePicker_ChangeMonthYear';
		protected $strJqProperty = 'onChangeMonthYear';
	}

	/**
	 * null
	 */
	class QJqDateTimePicker_CloseEvent extends QJqUiPropertyEvent {
		const EventName = 'QJqDateTimePicker_Close';
		protected $strJqProperty = 'onClose';
	}


	/**
	 * Generated QJqDateTimePickerGen class.
	 * 
	 * This is the QJqDateTimePickerGen class which is automatically generated
	 * by scraping the JQuery UI documentation website. As such, it includes all the options
	 * as listed by the JQuery UI website, which may or may not be appropriate for QCubed. See
	 * the QJqDateTimePickerBase class for any glue code to make this class more
	 * usable in QCubed.
	 * 
	 * @see QJqDateTimePickerBase
	 * @package Controls\Base
	 * @property string $CurrentText Default: "Now", A Localization Setting - Text for the Now button.
	 * @property string $CloseText Default: "Done", A Localization Setting - Text for the Close button.
	 * @property array $AmNames Default: ['AM', 'A'], A Localization Setting - Array of strings to try and
	 * 		parse against to determine AM.
	 * @property array $PmNames Default: ['PM', 'P'], A Localization Setting - Array of strings to try and
	 * 		parse against to determine PM.
	 * @property string $JqTimeFormat Default: "HH:mm", A Localization Setting - String of format tokens to be
	 * 		replaced with the time. See Formatting.
	 * @property string $TimeSuffix Default: "", A Localization Setting - String to place after the formatted
	 * 		time.
	 * @property string $TimeOnlyTitle Default: "Choose Time", A Localization Setting - Title of the wigit when
	 * 		using only timepicker.
	 * @property string $TimeText Default: "Time", A Localization Setting - Label used within timepicker for
	 * 		the formatted time.
	 * @property string $HourText Default: "Hour", A Localization Setting - Label used to identify the hour
	 * 		slider.
	 * @property string $MinuteText Default: "Minute", A Localization Setting - Label used to identify the
	 * 		minute slider.
	 * @property string $SecondText Default: "Second", A Localization Setting - Label used to identify the
	 * 		second slider.
	 * @property string $MillisecText Default: "Millisecond", A Localization Setting - Label used to identify the
	 * 		millisecond slider.
	 * @property string $MicrosecText Default: "Microsecond", A Localization Setting - Label used to identify the
	 * 		microsecond slider.
	 * @property string $TimezoneText Default: "Timezone", A Localization Setting - Label used to identify the
	 * 		timezone slider.
	 * @property boolean $IsRTL Default: false, A Localization Setting - Right to Left support.
	 * @property boolean $AltFieldTimeOnly Default: true - When altField is used from datepicker altField will only
	 * 		receive the formatted time and the original field only receives date.
	 * @property string $AltSeparator Default: (separator option) - String placed between formatted date and
	 * 		formatted time in the altField.
	 * @property string $AltTimeSuffix Default: (timeSuffix option) - String always placed after the formatted
	 * 		time in the altField.
	 * @property string $AltTimeFormat Default: (timeFormat option) - The time format to use with the altField.
	 * @property boolean $AltRedirectFocus Default: true - Whether to immediately focus the main field whenever the
	 * 		altField receives focus. Effective at construction time only, changing it
	 * 		later has no effect.
	 * @property array $TimezoneList Default: [generated timezones] - An array of timezones used to populate the
	 * 		timezone select. Can be an array of values or an array of objects: { label:
	 * 		"EDT", value: -240 }.  The value should be the offset number in minutes. 
	 * 		So "-0400" which is the format "-hhmm", would equate to -240 minutes.
	 * @property string $ControlType Default: 'slider' - Whether to use 'slider' or 'select'. If 'slider' is
	 * 		unavailable through jQueryUI, 'select' will be used. For advanced usage you
	 * 		may pass an object which implements "create", "options", "value" methods to
	 * 		use controls other than sliders or selects.  See the _controls property in
	 * 		the source code for more details.  {  	create: function(tp_inst, obj, unit,
	 * 		val, min, max, step){	  		// generate whatever controls you want here, just
	 * 		return obj  	},  	options: function(tp_inst, obj, unit, opts, val){  		//
	 * 		if val==undefined return the value, else return obj  	},  	value:
	 * 		function(tp_inst, obj, unit, val){  		// if val==undefined return the
	 * 		value, else return obj  	}  }
	 * @property boolean $ShowHour Default: null - Whether to show the hour control.  The default of null will
	 * 		use detection from timeFormat.
	 * @property boolean $ShowMinute Default: null - Whether to show the minute control.  The default of null
	 * 		will use detection from timeFormat.
	 * @property boolean $ShowSecond Default: null - Whether to show the second control.  The default of null
	 * 		will use detection from timeFormat.
	 * @property boolean $ShowMillisec Default: null - Whether to show the millisecond control.  The default of
	 * 		null will use detection from timeFormat.
	 * @property boolean $ShowMicrosec Default: null - Whether to show the microsecond control.  The default of
	 * 		null will use detection from timeFormat.
	 * @property boolean $ShowTimezone Default: null - Whether to show the timezone select.
	 * @property boolean $ShowTime Default: true - Whether to show the time selected within the
	 * 		datetimepicker.
	 * @property integer $StepHour Default: 1 - Hours per step the slider makes.
	 * @property integer $StepMinute Default: 1 - Minutes per step the slider makes.
	 * @property integer $StepSecond Default: 1 - Seconds per step the slider makes.
	 * @property integer $StepMillisec Default: 1 - Milliseconds per step the slider makes.
	 * @property integer $StepMicrosec Default: 1 - Microseconds per step the slider makes.
	 * @property integer $Hour Default: 0 - Initial hour set.
	 * @property integer $Minute Default: 0 - Initial minute set.
	 * @property integer $Second Default: 0 - Initial second set.
	 * @property integer $Millisec Default: 0 - Initial millisecond set.
	 * @property integer $Microsec Default: 0 - Initial microsecond set.  Note: Javascript's native Date
	 * 		object does not natively support microseconds.  Timepicker adds ability to
	 * 		simply Date.setMicroseconds(m) and Date.getMicroseconds().  Date
	 * 		comparisons will not acknowledge microseconds.  Use this only for display
	 * 		purposes.
	 * @property string $Timezone Default: null - Initial timezone set.  This is the offset in minutes.  If
	 * 		null the browser's local timezone will be used.  If you're timezone is
	 * 		"-0400" you would use -240.  For backwards compatibility you may pass
	 * 		"-0400", however the timezone is stored in minutes and more reliable.
	 * @property integer $HourMin Default: 0 - The minimum hour allowed for all dates.
	 * @property integer $MinuteMin Default: 0 - The minimum minute allowed for all dates.
	 * @property integer $SecondMin Default: 0 - The minimum second allowed for all dates.
	 * @property integer $MillisecMin Default: 0 - The minimum millisecond allowed for all dates.
	 * @property integer $MicrosecMin Default: 0 - The minimum microsecond allowed for all dates.
	 * @property integer $HourMax Default: 23 - The maximum hour allowed for all dates.
	 * @property integer $MinuteMax Default: 59 - The maximum minute allowed for all dates.
	 * @property integer $SecondMax Default: 59 - The maximum second allowed for all dates.
	 * @property integer $MillisecMax Default: 999 - The maximum millisecond allowed for all dates.
	 * @property integer $MicrosecMax Default: 999 - The maximum microsecond allowed for all dates.
	 * @property integer $HourGrid Default: 0 - When greater than 0 a label grid will be generated under the
	 * 		slider.  This number represents the units (in hours) between labels.
	 * @property integer $MinuteGrid Default: 0 - When greater than 0 a label grid will be generated under the
	 * 		slider.  This number represents the units (in minutes) between labels.
	 * @property integer $SecondGrid Default: 0 - When greater than 0 a label grid will be genereated under the
	 * 		slider.  This number represents the units (in seconds) between labels.
	 * @property integer $MillisecGrid Default: 0 - When greater than 0 a label grid will be genereated under the
	 * 		slider.  This number represents the units (in milliseconds) between labels.
	 * @property integer $MicrosecGrid Default: 0 - When greater than 0 a label grid will be genereated under the
	 * 		slider.  This number represents the units (in microseconds) between labels.
	 * @property boolean $ShowButtonPanel Default: true - Whether to show the button panel at the bottom.  This is
	 * 		generally needed.
	 * @property boolean $TimeOnly Default: false - Hide the datepicker and only provide a time interface.
	 * @property boolean $TimeOnlyShowDate Default: false - Show the date and time in the input, but only allow the
	 * 		timepicker.
	 * @property string $OnSelect Default: null - Function to be called when a date is chosen or time has
	 * 		changed (parameters: datetimeText, datepickerInstance).
	 * @property boolean $AlwaysSetTime Default: true - Always have a time set internally, even before user has
	 * 		chosen one.
	 * @property string $Separator Default: " " - When formatting the time this string is placed between the
	 * 		formatted date and formatted time.
	 * @property string $PickerTimeFormat Default: (timeFormat option) - How to format the time displayed within the
	 * 		timepicker.
	 * @property string $PickerTimeSuffix Default: (timeSuffix option) - String to place after the formatted time
	 * 		within the timepicker.
	 * @property boolean $ShowTimepicker Default: true - Whether to show the timepicker within the datepicker.
	 * @property boolean $AddSliderAccess Default: false - Adds the sliderAccess plugin to sliders within timepicker
	 * @property string $SliderAccessArgs Default: null - Object to pass to sliderAccess when used.
	 * @property string $DefaultValue Default: null - String of the default time value placed in the input on
	 * 		focus when the input is empty.
	 * @property string $MinDateTime Default: null - Date object of the minimum datetime allowed.  Also
	 * 		available as minDate.
	 * @property string $MaxDateTime Default: null - Date object of the maximum datetime allowed. Also Available
	 * 		as maxDate.
	 * @property string $MinTime Default: null - String of the minimum time allowed. '8:00 am' will restrict
	 * 		to times after 8am
	 * @property string $MaxTime Default: null - String of the maximum time allowed. '8:00 pm' will restrict
	 * 		to times before 8pm
	 * @property string $Parse Default: 'strict' - How to parse the time string.  Two methods are
	 * 		provided: 'strict' which must match the timeFormat exactly, and 'loose'
	 * 		which uses javascript's new Date(timeString) to guess the time.  You may
	 * 		also pass in a function(timeFormat, timeString, options) to handle the
	 * 		parsing yourself, returning a simple object:   {  	hour: 19,  	minute: 10, 
	 * 			second: 23,  	millisec: 45,  	microsec: 23,  	timezone: '-0400'  }
	 * @property QJsClosure $BeforeShow null
	 * @property QJsClosure $OnChangeMonthYear null
	 * @property QJsClosure $OnClose null
	 */

	class QJqDateTimePickerGen extends QDatepickerBox	{
		protected $strJavaScripts = __JQUERY_EFFECTS__;
		protected $strStyleSheets = __JQUERY_CSS__;
		/** @var string */
		protected $strCurrentText;
		/** @var string */
		protected $strCloseText;
		/** @var array */
		protected $arrAmNames;
		/** @var array */
		protected $arrPmNames;
		/** @var string */
		protected $strJqTimeFormat;
		/** @var string */
		protected $strTimeSuffix;
		/** @var string */
		protected $strTimeOnlyTitle;
		/** @var string */
		protected $strTimeText;
		/** @var string */
		protected $strHourText;
		/** @var string */
		protected $strMinuteText;
		/** @var string */
		protected $strSecondText;
		/** @var string */
		protected $strMillisecText;
		/** @var string */
		protected $strMicrosecText;
		/** @var string */
		protected $strTimezoneText;
		/** @var boolean */
		protected $blnIsRTL = null;
		/** @var boolean */
		protected $blnAltFieldTimeOnly = null;
		/** @var string */
		protected $strAltSeparator;
		/** @var string */
		protected $strAltTimeSuffix;
		/** @var string */
		protected $strAltTimeFormat;
		/** @var boolean */
		protected $blnAltRedirectFocus = null;
		/** @var array */
		protected $arrTimezoneList;
		/** @var string */
		protected $strControlType;
		/** @var boolean */
		protected $blnShowHour;
		/** @var boolean */
		protected $blnShowMinute;
		/** @var boolean */
		protected $blnShowSecond;
		/** @var boolean */
		protected $blnShowMillisec;
		/** @var boolean */
		protected $blnShowMicrosec;
		/** @var boolean */
		protected $blnShowTimezone;
		/** @var boolean */
		protected $blnShowTime = null;
		/** @var integer */
		protected $intStepHour = null;
		/** @var integer */
		protected $intStepMinute = null;
		/** @var integer */
		protected $intStepSecond = null;
		/** @var integer */
		protected $intStepMillisec = null;
		/** @var integer */
		protected $intStepMicrosec = null;
		/** @var integer */
		protected $intHour;
		/** @var integer */
		protected $intMinute;
		/** @var integer */
		protected $intSecond;
		/** @var integer */
		protected $intMillisec;
		/** @var integer */
		protected $intMicrosec;
		/** @var string */
		protected $strTimezone;
		/** @var integer */
		protected $intHourMin;
		/** @var integer */
		protected $intMinuteMin;
		/** @var integer */
		protected $intSecondMin;
		/** @var integer */
		protected $intMillisecMin;
		/** @var integer */
		protected $intMicrosecMin;
		/** @var integer */
		protected $intHourMax = null;
		/** @var integer */
		protected $intMinuteMax = null;
		/** @var integer */
		protected $intSecondMax = null;
		/** @var integer */
		protected $intMillisecMax = null;
		/** @var integer */
		protected $intMicrosecMax = null;
		/** @var integer */
		protected $intHourGrid;
		/** @var integer */
		protected $intMinuteGrid;
		/** @var integer */
		protected $intSecondGrid;
		/** @var integer */
		protected $intMillisecGrid;
		/** @var integer */
		protected $intMicrosecGrid;
		/** @var boolean */
		protected $blnShowButtonPanel = null;
		/** @var boolean */
		protected $blnTimeOnly = null;
		/** @var boolean */
		protected $blnTimeOnlyShowDate = null;
		/** @var string */
		protected $strOnSelect;
		/** @var boolean */
		protected $blnAlwaysSetTime = null;
		/** @var string */
		protected $strSeparator;
		/** @var string */
		protected $strPickerTimeFormat;
		/** @var string */
		protected $strPickerTimeSuffix;
		/** @var boolean */
		protected $blnShowTimepicker = null;
		/** @var boolean */
		protected $blnAddSliderAccess = null;
		/** @var string */
		protected $strSliderAccessArgs;
		/** @var string */
		protected $strDefaultValue;
		/** @var string */
		protected $strMinDateTime;
		/** @var string */
		protected $strMaxDateTime;
		/** @var string */
		protected $strMinTime;
		/** @var string */
		protected $strMaxTime;
		/** @var string */
		protected $strParse;
		/** @var QJsClosure */
		protected $mixBeforeShow = null;
		/** @var QJsClosure */
		protected $mixOnChangeMonthYear = null;
		/** @var QJsClosure */
		protected $mixOnClose = null;
		
		protected function makeJsProperty($strProp, $strKey) {
			$objValue = $this->$strProp;
			if (null === $objValue) {
				return '';
			}

			return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
		}

		protected function makeJqOptions() {
			$strJqOptions = parent::makeJqOptions();
			if ($strJqOptions) $strJqOptions .= ', ';
			$strJqOptions .= $this->makeJsProperty('CurrentText', 'currentText');
			$strJqOptions .= $this->makeJsProperty('CloseText', 'closeText');
			$strJqOptions .= $this->makeJsProperty('AmNames', 'amNames');
			$strJqOptions .= $this->makeJsProperty('PmNames', 'pmNames');
			$strJqOptions .= $this->makeJsProperty('JqTimeFormat', 'timeFormat');
			$strJqOptions .= $this->makeJsProperty('TimeSuffix', 'timeSuffix');
			$strJqOptions .= $this->makeJsProperty('TimeOnlyTitle', 'timeOnlyTitle');
			$strJqOptions .= $this->makeJsProperty('TimeText', 'timeText');
			$strJqOptions .= $this->makeJsProperty('HourText', 'hourText');
			$strJqOptions .= $this->makeJsProperty('MinuteText', 'minuteText');
			$strJqOptions .= $this->makeJsProperty('SecondText', 'secondText');
			$strJqOptions .= $this->makeJsProperty('MillisecText', 'millisecText');
			$strJqOptions .= $this->makeJsProperty('MicrosecText', 'microsecText');
			$strJqOptions .= $this->makeJsProperty('TimezoneText', 'timezoneText');
			$strJqOptions .= $this->makeJsProperty('IsRTL', 'isRTL');
			$strJqOptions .= $this->makeJsProperty('AltFieldTimeOnly', 'altFieldTimeOnly');
			$strJqOptions .= $this->makeJsProperty('AltSeparator', 'altSeparator');
			$strJqOptions .= $this->makeJsProperty('AltTimeSuffix', 'altTimeSuffix');
			$strJqOptions .= $this->makeJsProperty('AltTimeFormat', 'altTimeFormat');
			$strJqOptions .= $this->makeJsProperty('AltRedirectFocus', 'altRedirectFocus');
			$strJqOptions .= $this->makeJsProperty('TimezoneList', 'timezoneList');
			$strJqOptions .= $this->makeJsProperty('ControlType', 'controlType');
			$strJqOptions .= $this->makeJsProperty('ShowHour', 'showHour');
			$strJqOptions .= $this->makeJsProperty('ShowMinute', 'showMinute');
			$strJqOptions .= $this->makeJsProperty('ShowSecond', 'showSecond');
			$strJqOptions .= $this->makeJsProperty('ShowMillisec', 'showMillisec');
			$strJqOptions .= $this->makeJsProperty('ShowMicrosec', 'showMicrosec');
			$strJqOptions .= $this->makeJsProperty('ShowTimezone', 'showTimezone');
			$strJqOptions .= $this->makeJsProperty('ShowTime', 'showTime');
			$strJqOptions .= $this->makeJsProperty('StepHour', 'stepHour');
			$strJqOptions .= $this->makeJsProperty('StepMinute', 'stepMinute');
			$strJqOptions .= $this->makeJsProperty('StepSecond', 'stepSecond');
			$strJqOptions .= $this->makeJsProperty('StepMillisec', 'stepMillisec');
			$strJqOptions .= $this->makeJsProperty('StepMicrosec', 'stepMicrosec');
			$strJqOptions .= $this->makeJsProperty('Hour', 'hour');
			$strJqOptions .= $this->makeJsProperty('Minute', 'minute');
			$strJqOptions .= $this->makeJsProperty('Second', 'second');
			$strJqOptions .= $this->makeJsProperty('Millisec', 'millisec');
			$strJqOptions .= $this->makeJsProperty('Microsec', 'microsec');
			$strJqOptions .= $this->makeJsProperty('Timezone', 'timezone');
			$strJqOptions .= $this->makeJsProperty('HourMin', 'hourMin');
			$strJqOptions .= $this->makeJsProperty('MinuteMin', 'minuteMin');
			$strJqOptions .= $this->makeJsProperty('SecondMin', 'secondMin');
			$strJqOptions .= $this->makeJsProperty('MillisecMin', 'millisecMin');
			$strJqOptions .= $this->makeJsProperty('MicrosecMin', 'microsecMin');
			$strJqOptions .= $this->makeJsProperty('HourMax', 'hourMax');
			$strJqOptions .= $this->makeJsProperty('MinuteMax', 'minuteMax');
			$strJqOptions .= $this->makeJsProperty('SecondMax', 'secondMax');
			$strJqOptions .= $this->makeJsProperty('MillisecMax', 'millisecMax');
			$strJqOptions .= $this->makeJsProperty('MicrosecMax', 'microsecMax');
			$strJqOptions .= $this->makeJsProperty('HourGrid', 'hourGrid');
			$strJqOptions .= $this->makeJsProperty('MinuteGrid', 'minuteGrid');
			$strJqOptions .= $this->makeJsProperty('SecondGrid', 'secondGrid');
			$strJqOptions .= $this->makeJsProperty('MillisecGrid', 'millisecGrid');
			$strJqOptions .= $this->makeJsProperty('MicrosecGrid', 'microsecGrid');
			$strJqOptions .= $this->makeJsProperty('ShowButtonPanel', 'showButtonPanel');
			$strJqOptions .= $this->makeJsProperty('TimeOnly', 'timeOnly');
			$strJqOptions .= $this->makeJsProperty('TimeOnlyShowDate', 'timeOnlyShowDate');
			$strJqOptions .= $this->makeJsProperty('OnSelect', 'onSelect');
			$strJqOptions .= $this->makeJsProperty('AlwaysSetTime', 'alwaysSetTime');
			$strJqOptions .= $this->makeJsProperty('Separator', 'separator');
			$strJqOptions .= $this->makeJsProperty('PickerTimeFormat', 'pickerTimeFormat');
			$strJqOptions .= $this->makeJsProperty('PickerTimeSuffix', 'pickerTimeSuffix');
			$strJqOptions .= $this->makeJsProperty('ShowTimepicker', 'showTimepicker');
			$strJqOptions .= $this->makeJsProperty('AddSliderAccess', 'addSliderAccess');
			$strJqOptions .= $this->makeJsProperty('SliderAccessArgs', 'sliderAccessArgs');
			$strJqOptions .= $this->makeJsProperty('DefaultValue', 'defaultValue');
			$strJqOptions .= $this->makeJsProperty('MinDateTime', 'minDateTime');
			$strJqOptions .= $this->makeJsProperty('MaxDateTime', 'maxDateTime');
			$strJqOptions .= $this->makeJsProperty('MinTime', 'minTime');
			$strJqOptions .= $this->makeJsProperty('MaxTime', 'maxTime');
			$strJqOptions .= $this->makeJsProperty('Parse', 'parse');
			$strJqOptions .= $this->makeJsProperty('BeforeShow', 'beforeShow');
			$strJqOptions .= $this->makeJsProperty('OnChangeMonthYear', 'onChangeMonthYear');
			$strJqOptions .= $this->makeJsProperty('OnClose', 'onClose');
			if ($strJqOptions) $strJqOptions = substr($strJqOptions, 0, -2);
			return $strJqOptions;
		}

		public function getJqSetupFunction() {
			return 'datetimepicker';
		}

		public function GetControlJavaScript() {
			return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
		}

		public function GetEndScript() {
			$str = '';
			if ($this->getJqControlId() !== $this->ControlId) {
				// #845: if the element receiving the jQuery UI events is different than this control
				// we need to clean-up the previously attached event handlers, so that they are not duplicated 
				// during the next ajax update which replaces this control.
				$str = sprintf('jQuery("#%s").off(); ', $this->getJqControlId());
			}
			$str .= $this->GetControlJavaScript();
			if ($strParentScript = parent::GetEndScript()) {
				$str .= '; ' . $strParentScript;
			}
			return $str;
		}
		
		/**
		 * Call a JQuery UI Method on the object. 
		 * 
		 * A helper function to call a jQuery UI Method. Takes variable number of arguments.
		 *
		 * @param boolean $blnAttribute true if the method is modifying an option, false if executing a command
		 * @param string $strMethodName the method name to call
		 * @internal param $mixed [optional] $mixParam1
		 * @internal param $mixed [optional] $mixParam2
		 */
		protected function CallJqUiMethod($blnAttribute, $strMethodName /*, ... */) {
			$args = func_get_args();
			array_shift ($args);

			$strArgs = JavaScriptHelper::toJsObject($args);
			$strJs = sprintf('jQuery("#%s").%s(%s)',
				$this->getJqControlId(),
				$this->getJqSetupFunction(),
				substr($strArgs, 1, strlen($strArgs)-2));	// params without brackets
			if ($blnAttribute) {
				$this->AddAttributeScript($strJs);
			} else {
				QApplication::ExecuteJavaScript($strJs);
			}
		}




		public function __get($strName) {
			switch ($strName) {
				case 'CurrentText': return $this->strCurrentText;
				case 'CloseText': return $this->strCloseText;
				case 'AmNames': return $this->arrAmNames;
				case 'PmNames': return $this->arrPmNames;
				case 'JqTimeFormat': return $this->strJqTimeFormat;
				case 'TimeSuffix': return $this->strTimeSuffix;
				case 'TimeOnlyTitle': return $this->strTimeOnlyTitle;
				case 'TimeText': return $this->strTimeText;
				case 'HourText': return $this->strHourText;
				case 'MinuteText': return $this->strMinuteText;
				case 'SecondText': return $this->strSecondText;
				case 'MillisecText': return $this->strMillisecText;
				case 'MicrosecText': return $this->strMicrosecText;
				case 'TimezoneText': return $this->strTimezoneText;
				case 'IsRTL': return $this->blnIsRTL;
				case 'AltFieldTimeOnly': return $this->blnAltFieldTimeOnly;
				case 'AltSeparator': return $this->strAltSeparator;
				case 'AltTimeSuffix': return $this->strAltTimeSuffix;
				case 'AltTimeFormat': return $this->strAltTimeFormat;
				case 'AltRedirectFocus': return $this->blnAltRedirectFocus;
				case 'TimezoneList': return $this->arrTimezoneList;
				case 'ControlType': return $this->strControlType;
				case 'ShowHour': return $this->blnShowHour;
				case 'ShowMinute': return $this->blnShowMinute;
				case 'ShowSecond': return $this->blnShowSecond;
				case 'ShowMillisec': return $this->blnShowMillisec;
				case 'ShowMicrosec': return $this->blnShowMicrosec;
				case 'ShowTimezone': return $this->blnShowTimezone;
				case 'ShowTime': return $this->blnShowTime;
				case 'StepHour': return $this->intStepHour;
				case 'StepMinute': return $this->intStepMinute;
				case 'StepSecond': return $this->intStepSecond;
				case 'StepMillisec': return $this->intStepMillisec;
				case 'StepMicrosec': return $this->intStepMicrosec;
				case 'Hour': return $this->intHour;
				case 'Minute': return $this->intMinute;
				case 'Second': return $this->intSecond;
				case 'Millisec': return $this->intMillisec;
				case 'Microsec': return $this->intMicrosec;
				case 'Timezone': return $this->strTimezone;
				case 'HourMin': return $this->intHourMin;
				case 'MinuteMin': return $this->intMinuteMin;
				case 'SecondMin': return $this->intSecondMin;
				case 'MillisecMin': return $this->intMillisecMin;
				case 'MicrosecMin': return $this->intMicrosecMin;
				case 'HourMax': return $this->intHourMax;
				case 'MinuteMax': return $this->intMinuteMax;
				case 'SecondMax': return $this->intSecondMax;
				case 'MillisecMax': return $this->intMillisecMax;
				case 'MicrosecMax': return $this->intMicrosecMax;
				case 'HourGrid': return $this->intHourGrid;
				case 'MinuteGrid': return $this->intMinuteGrid;
				case 'SecondGrid': return $this->intSecondGrid;
				case 'MillisecGrid': return $this->intMillisecGrid;
				case 'MicrosecGrid': return $this->intMicrosecGrid;
				case 'ShowButtonPanel': return $this->blnShowButtonPanel;
				case 'TimeOnly': return $this->blnTimeOnly;
				case 'TimeOnlyShowDate': return $this->blnTimeOnlyShowDate;
				case 'OnSelect': return $this->strOnSelect;
				case 'AlwaysSetTime': return $this->blnAlwaysSetTime;
				case 'Separator': return $this->strSeparator;
				case 'PickerTimeFormat': return $this->strPickerTimeFormat;
				case 'PickerTimeSuffix': return $this->strPickerTimeSuffix;
				case 'ShowTimepicker': return $this->blnShowTimepicker;
				case 'AddSliderAccess': return $this->blnAddSliderAccess;
				case 'SliderAccessArgs': return $this->strSliderAccessArgs;
				case 'DefaultValue': return $this->strDefaultValue;
				case 'MinDateTime': return $this->strMinDateTime;
				case 'MaxDateTime': return $this->strMaxDateTime;
				case 'MinTime': return $this->strMinTime;
				case 'MaxTime': return $this->strMaxTime;
				case 'Parse': return $this->strParse;
				case 'BeforeShow': return $this->mixBeforeShow;
				case 'OnChangeMonthYear': return $this->mixOnChangeMonthYear;
				case 'OnClose': return $this->mixOnClose;
				default: 
					try { 
						return parent::__get($strName); 
					} catch (QCallerException $objExc) { 
						$objExc->IncrementOffset(); 
						throw $objExc; 
					}
			}
		}

		public function __set($strName, $mixValue) {
			switch ($strName) {
				case 'CurrentText':
					try {
						$this->strCurrentText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'currentText', $this->strCurrentText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'CloseText':
					try {
						$this->strCloseText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'closeText', $this->strCloseText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AmNames':
					try {
						$this->arrAmNames = QType::Cast($mixValue, QType::ArrayType);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'amNames', $this->arrAmNames);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'PmNames':
					try {
						$this->arrPmNames = QType::Cast($mixValue, QType::ArrayType);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'pmNames', $this->arrPmNames);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'JqTimeFormat':
					try {
						$this->strJqTimeFormat = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'timeFormat', $this->strJqTimeFormat);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'TimeSuffix':
					try {
						$this->strTimeSuffix = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'timeSuffix', $this->strTimeSuffix);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'TimeOnlyTitle':
					try {
						$this->strTimeOnlyTitle = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'timeOnlyTitle', $this->strTimeOnlyTitle);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'TimeText':
					try {
						$this->strTimeText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'timeText', $this->strTimeText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'HourText':
					try {
						$this->strHourText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'hourText', $this->strHourText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MinuteText':
					try {
						$this->strMinuteText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'minuteText', $this->strMinuteText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'SecondText':
					try {
						$this->strSecondText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'secondText', $this->strSecondText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MillisecText':
					try {
						$this->strMillisecText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'millisecText', $this->strMillisecText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MicrosecText':
					try {
						$this->strMicrosecText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'microsecText', $this->strMicrosecText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'TimezoneText':
					try {
						$this->strTimezoneText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'timezoneText', $this->strTimezoneText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'IsRTL':
					try {
						$this->blnIsRTL = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'isRTL', $this->blnIsRTL);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AltFieldTimeOnly':
					try {
						$this->blnAltFieldTimeOnly = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'altFieldTimeOnly', $this->blnAltFieldTimeOnly);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AltSeparator':
					try {
						$this->strAltSeparator = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'altSeparator', $this->strAltSeparator);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AltTimeSuffix':
					try {
						$this->strAltTimeSuffix = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'altTimeSuffix', $this->strAltTimeSuffix);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AltTimeFormat':
					try {
						$this->strAltTimeFormat = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'altTimeFormat', $this->strAltTimeFormat);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AltRedirectFocus':
					try {
						$this->blnAltRedirectFocus = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'altRedirectFocus', $this->blnAltRedirectFocus);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'TimezoneList':
					try {
						$this->arrTimezoneList = QType::Cast($mixValue, QType::ArrayType);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'timezoneList', $this->arrTimezoneList);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ControlType':
					try {
						$this->strControlType = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'controlType', $this->strControlType);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowHour':
					try {
						$this->blnShowHour = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'showHour', $this->blnShowHour);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowMinute':
					try {
						$this->blnShowMinute = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'showMinute', $this->blnShowMinute);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowSecond':
					try {
						$this->blnShowSecond = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'showSecond', $this->blnShowSecond);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowMillisec':
					try {
						$this->blnShowMillisec = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'showMillisec', $this->blnShowMillisec);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowMicrosec':
					try {
						$this->blnShowMicrosec = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'showMicrosec', $this->blnShowMicrosec);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowTimezone':
					try {
						$this->blnShowTimezone = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'showTimezone', $this->blnShowTimezone);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowTime':
					try {
						$this->blnShowTime = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'showTime', $this->blnShowTime);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'StepHour':
					try {
						$this->intStepHour = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'stepHour', $this->intStepHour);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'StepMinute':
					try {
						$this->intStepMinute = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'stepMinute', $this->intStepMinute);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'StepSecond':
					try {
						$this->intStepSecond = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'stepSecond', $this->intStepSecond);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'StepMillisec':
					try {
						$this->intStepMillisec = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'stepMillisec', $this->intStepMillisec);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'StepMicrosec':
					try {
						$this->intStepMicrosec = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'stepMicrosec', $this->intStepMicrosec);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Hour':
					try {
						$this->intHour = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'hour', $this->intHour);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Minute':
					try {
						$this->intMinute = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'minute', $this->intMinute);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Second':
					try {
						$this->intSecond = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'second', $this->intSecond);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Millisec':
					try {
						$this->intMillisec = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'millisec', $this->intMillisec);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Microsec':
					try {
						$this->intMicrosec = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'microsec', $this->intMicrosec);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Timezone':
					try {
						$this->strTimezone = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'timezone', $this->strTimezone);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'HourMin':
					try {
						$this->intHourMin = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'hourMin', $this->intHourMin);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MinuteMin':
					try {
						$this->intMinuteMin = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'minuteMin', $this->intMinuteMin);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'SecondMin':
					try {
						$this->intSecondMin = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'secondMin', $this->intSecondMin);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MillisecMin':
					try {
						$this->intMillisecMin = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'millisecMin', $this->intMillisecMin);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MicrosecMin':
					try {
						$this->intMicrosecMin = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'microsecMin', $this->intMicrosecMin);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'HourMax':
					try {
						$this->intHourMax = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'hourMax', $this->intHourMax);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MinuteMax':
					try {
						$this->intMinuteMax = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'minuteMax', $this->intMinuteMax);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'SecondMax':
					try {
						$this->intSecondMax = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'secondMax', $this->intSecondMax);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MillisecMax':
					try {
						$this->intMillisecMax = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'millisecMax', $this->intMillisecMax);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MicrosecMax':
					try {
						$this->intMicrosecMax = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'microsecMax', $this->intMicrosecMax);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'HourGrid':
					try {
						$this->intHourGrid = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'hourGrid', $this->intHourGrid);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MinuteGrid':
					try {
						$this->intMinuteGrid = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'minuteGrid', $this->intMinuteGrid);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'SecondGrid':
					try {
						$this->intSecondGrid = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'secondGrid', $this->intSecondGrid);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MillisecGrid':
					try {
						$this->intMillisecGrid = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'millisecGrid', $this->intMillisecGrid);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MicrosecGrid':
					try {
						$this->intMicrosecGrid = QType::Cast($mixValue, QType::Integer);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'microsecGrid', $this->intMicrosecGrid);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowButtonPanel':
					try {
						$this->blnShowButtonPanel = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'showButtonPanel', $this->blnShowButtonPanel);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'TimeOnly':
					try {
						$this->blnTimeOnly = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'timeOnly', $this->blnTimeOnly);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'TimeOnlyShowDate':
					try {
						$this->blnTimeOnlyShowDate = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'timeOnlyShowDate', $this->blnTimeOnlyShowDate);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'OnSelect':
					try {
						$this->strOnSelect = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'onSelect', $this->strOnSelect);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AlwaysSetTime':
					try {
						$this->blnAlwaysSetTime = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'alwaysSetTime', $this->blnAlwaysSetTime);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Separator':
					try {
						$this->strSeparator = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'separator', $this->strSeparator);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'PickerTimeFormat':
					try {
						$this->strPickerTimeFormat = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'pickerTimeFormat', $this->strPickerTimeFormat);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'PickerTimeSuffix':
					try {
						$this->strPickerTimeSuffix = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'pickerTimeSuffix', $this->strPickerTimeSuffix);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowTimepicker':
					try {
						$this->blnShowTimepicker = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'showTimepicker', $this->blnShowTimepicker);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AddSliderAccess':
					try {
						$this->blnAddSliderAccess = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'addSliderAccess', $this->blnAddSliderAccess);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'SliderAccessArgs':
					try {
						$this->strSliderAccessArgs = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'sliderAccessArgs', $this->strSliderAccessArgs);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DefaultValue':
					try {
						$this->strDefaultValue = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'defaultValue', $this->strDefaultValue);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MinDateTime':
					try {
						$this->strMinDateTime = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'minDateTime', $this->strMinDateTime);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MaxDateTime':
					try {
						$this->strMaxDateTime = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'maxDateTime', $this->strMaxDateTime);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MinTime':
					try {
						$this->strMinTime = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'minTime', $this->strMinTime);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MaxTime':
					try {
						$this->strMaxTime = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'maxTime', $this->strMaxTime);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Parse':
					try {
						$this->strParse = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'parse', $this->strParse);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'BeforeShow':
					try {
						$this->mixBeforeShow = new QJsClosure($mixValue, array("i","dp_inst","tp_inst"));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'OnChangeMonthYear':
					try {
						$this->mixOnChangeMonthYear = new QJsClosure($mixValue, array("i","year","month","dp_inst","tp_inst"));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'OnClose':
					try {
						$this->mixOnClose = new QJsClosure($mixValue, array("i","dateText","dp_inst","tp_inst"));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}


				default:
					try {
						parent::__set($strName, $mixValue);
						break;
					} catch (QCallerException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}
			}
		}
	}

?>
